myImage(a1)
a2 <- svd1$u %*% svd1$d %*% svd1$v
a2 <- svd1$u %*% svd1$d
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a3 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(,562:563)
names[,562:563]
names(ssd[,562:563])
ssd$subject
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <-ssd, subject = 1
sub1 <-subset(ssd, subject = 1)
sub1 <-subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
svd1$u
dim(svd1$u)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,10:12])
dist(sub1[,c(10:12,maxCon)])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1, centers = 6)
kClust <- kmeans(sub1[,], centers = 6)
kClust <- kmeans(sub1[,-2], centers = 6)
kmeans(sub1)
kClust <- kmeans(sub1, centers = 6)
kClust <- kmeans(sub1[,-c(12:13)]), centers = 6)
kClust <- kmeans(-c(12:13)), centers = 6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- call(kClust$size==29)
laying <- kClust$size==29
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch=19, ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch=19, ylab = "Walkdown Cluster")
dim(pm0)
head(pm0)
names(cnames)
print(cnames)
cnames <- strsplit(cnames, sep = "|", fixed=T)
cnames <- strsplit(cnames, sep = "|", fixed = T)
cnames <- strsplit(cnames, "|", fixed = T)
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames <- strsplit(cnames, "|", fixed = TRUE)
a
1
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames <- strsplit(cnames, "|", fixed = TRUE)
quit
library(swirl)
swirl()
cnames <- strsplit(cnames, "|", fixed = TRUE)
print(cnames)
names(pm0) <- cnames[[1]][wcol]
names(pm0) <- make.names(cnames[[1]][wcol])
pm0
head(pm0)
pm0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
library(swirl)
swirl()
x0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
info()
skip()
skip
skip()
x0 <- pm0$Sample.Value
info()
skip()
x0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
x0
pm0$sample.Value
pm0$Sample.Value
x0 <- pm0$Sample.Value
library(swirl)
swirl()
pm0 <- x0
x0 <- p0
x0 <- pm0
x0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
quit
x0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
quit()
exit
library(swirl)
swirl()
dim(p0)
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
pm0
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0), log10(x1))
negative <- x1<0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date, as.character(dates), "%Y%m%d")
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
now
both
head(pm0)
cnt0 <- subset(pm0, State.Code = 36 & country.site = 10)
cnt0 <- subset(pm0, State.Code = 36)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID = 2008)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub.Sample.Value
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch=20)
abline = median(pm25, lwd = 2, na.rm = TRUE)
abline(median(pm25), lwd = 2, na.rm = TRUE)
abline(median = x0sub, lwd =2, na.rm = TRUE)
abline(h = median(x0sub, na.rm = TRUE),lwd=2)
plot(dates1, x1sub, pch=20)
abline(h = median(x1sub, na.rm = TRUE),lwd=2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state == names(mn0), mean == mn0)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, set = "state")
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5,2.5)))
with(mrg, plot(rep(2,52), mrg[,3], xlim = c(.5,2.5)))
with(mrg, plot(rep(2,52), mrg[,3])
)
with(mrg, points(rep(2, 52), mrg[, 3]))
segments(x, y, x, y)
segments(mrg[,2], mrg[,1], x, y)
segments(x,y)
segments(x1,y1)
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y,]
## 1. Code for reading in the dataset and/or processing the data
library("dplyr")
library("lattice")
## library("knitr")
URL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip";
zipFile <- "repdata_data_factivity.zip"
csvFile <- "activity.csv"
download.file(URL, zipFile, method = 'curl')
unzip(zipFile)
##filepath <- setwd('~/Desktop/Week 1/Assignment 1')
AMD <- read.csv(csvFile, sep = ',', header = TRUE, stringsAsFactors = FALSE)
AMD$date <- as.Date(AMD$date)
## What is mean total number of steps taken per day?
## For this part of the assignment, you can ignore the missing values in the dataset.
## 1. Calculate the total number of steps taken per day
stepsPerDay <- AMD %>%
filter(!is.na(steps)) %>%
group_by(date) %>%
summarize(total = sum(steps))
## 2. Make a histogram of the total number of steps taken each day
hist(stepsPerDay$total, main = 'Total Steps per Day', xlab = 'Number of Steps')
## 3. Calculate and report the mean and median of the total number of steps taken per day
round(mean(stepsPerDay$total))
median(stepsPerDay$total)
## What is the average daily activity pattern?
## 1. Make a time series plot (i.e. 𝚝𝚢𝚙𝚎 = "𝚕") of the 5-minute interval (x-axis) and
##    the average number of steps taken, averaged across all days (y-axis)
stepsPerInterval <- aggregate(steps ~ interval, data = AMD, FUN = mean)
plot(x = stepsPerInterval$interval, y = stepsPerInterval$steps, type = 'l',
main = 'Avg Number of Steps Across All Days', xlab = 'Steps', ylab = 'Interval')
## 2. Which 5-minute interval, on average across all the days in the dataset,
##    contains the maximum number of steps?
stepsPerInterval[which.max(stepsPerInterval$steps), ]
## Imputing missing values
## Note that there are a number of days/intervals where there are missing values (coded as 𝙽𝙰)
## The presence of missing days may introduce bias into some calculations or summaries of the data.
## 1. Calculate and report the total number of missing values in the dataset (i.e. the total number
##    of rows with 𝙽𝙰s)
sum(is.na(AMD$steps))
## 2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does
##    not need to be sophisticated. For example, you could use the mean/median for that day, or the mean
##    for that 5-minute interval, etc.
## For the outputs in the steps column that were NAs I chose to use the mean number of steps for the
## 5 minute interval
IntervalAvg <- aggregate(steps ~ interval, FUN = mean, data = AMD)
## 3. Create a new dataset that is equal to the original dataset but with the missing data filled in
AMD_Adj <- merge(x = AMD, y = IntervalAvg, by = 'interval')
AMD_Adj$stepsAdj <- ifelse(is.na(AMD_Adj$steps.x), AMD_Adj$steps.y, AMD_Adj$steps.x)
AMD_Adj <- AMD_Adj[c('interval', 'date', 'stepsAdj')]
## 4. Make a histogram of the total number of steps taken each day and Calculate and report the mean
##    and median total number of steps taken per day. Do these values differ from the estimates from
##    the first part of the assignment? What is the impact of imputing missing data on the estimates
##    of the total daily number of steps?
stepsPerDay_Adj <- AMD_Adj %>%
group_by(date) %>%
summarize(total = sum(stepsAdj))
hist(stepsPerDay_Adj$total, main = expression('Total Steps per Day'[Adj]), xlab = 'Number of Steps')
## Means the same.  Minor difference in medians.
round(mean(stepsPerDay_Adj$total))
round(median(stepsPerDay_Adj$total))
## Are there differences in activity patterns between weekdays and weekends?
## For this part the 𝚠𝚎𝚎𝚔𝚍𝚊𝚢𝚜() function may be of some help here. Use the dataset w
## ith the filled-in missing values for this part.
## 1. Create a new factor variable in the dataset with two levels – “weekday” and “weekend”
##    indicating whether a given date is a weekday or weekend day.
AMD_Adj$weekdays <- as.factor(ifelse(weekdays(AMD_Adj$date) %in%
c("Saturday", "Sunday"), "weekend", "weekday"))
## 2. Make a panel plot containing a time series plot (i.e. type = 'l') of the 5-minute interval
##    (x-axis) and the avg number of steps taken, across all weekend days (y-axis). See the README
##    file in the GitHub repository to see an example of what this plot should look like using
##    simulated data.
AMD_Weekday <- aggregate(stepsAdj ~ interval + weekdays, AMD_Adj, mean)
xyplot(stepsAdj ~ interval | weekdays, AMD_Weekday, type = 'l', layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
## 1. Code for reading in the dataset and/or processing the data
library("dplyr")
library("lattice")
## library("knitr")
URL <- 'https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip';
zipFile <- 'repdata_data_factivity.zip';
csvFile <- 'activity.csv'
download.file(URL, zipFile, method = 'curl')
unzip(zipFile)
AMD <- read.csv(csvFile, sep = ',', header = TRUE, stringsAsFactors = FALSE)
AMD$date <- as.Date(AMD$date)
## What is mean total number of steps taken per day?
## For this part of the assignment, you can ignore the missing values in the dataset.
## 1. Calculate the total number of steps taken per day
stepsPerDay <- AMD %>%
filter(!is.na(steps)) %>%
group_by(date) %>%
summarize(total = sum(steps))
## 2. Make a histogram of the total number of steps taken each day
hist(stepsPerDay$total, main = 'Total Steps per Day', xlab = 'Number of Steps')
## 3. Calculate and report the mean and median of the total number of steps taken per day
round(mean(stepsPerDay$total))
median(stepsPerDay$total)
## What is the average daily activity pattern?
## 1. Make a time series plot (i.e. 𝚝𝚢𝚙𝚎 = "𝚕") of the 5-minute interval (x-axis) and
##    the average number of steps taken, averaged across all days (y-axis)
stepsPerInterval <- aggregate(steps ~ interval, data = AMD, FUN = mean)
plot(x = stepsPerInterval$interval, y = stepsPerInterval$steps, type = 'l',
main = 'Avg Number of Steps Across All Days', xlab = 'Steps', ylab = 'Interval')
## 2. Which 5-minute interval, on average across all the days in the dataset,
##    contains the maximum number of steps?
stepsPerInterval[which.max(stepsPerInterval$steps), ]
## Imputing missing values
## Note that there are a number of days/intervals where there are missing values (coded as 𝙽𝙰)
## The presence of missing days may introduce bias into some calculations or summaries of the data.
## 1. Calculate and report the total number of missing values in the dataset (i.e. the total number
##    of rows with 𝙽𝙰s)
sum(is.na(AMD$steps))
## 2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does
##    not need to be sophisticated. For example, you could use the mean/median for that day, or the mean
##    for that 5-minute interval, etc.
## For the outputs in the steps column that were NAs I chose to use the mean number of steps for the
## 5 minute interval
IntervalAvg <- aggregate(steps ~ interval, FUN = mean, data = AMD)
## 3. Create a new dataset that is equal to the original dataset but with the missing data filled in
AMD_Adj <- merge(x = AMD, y = IntervalAvg, by = 'interval')
AMD_Adj$stepsAdj <- ifelse(is.na(AMD_Adj$steps.x), AMD_Adj$steps.y, AMD_Adj$steps.x)
AMD_Adj <- AMD_Adj[c('interval', 'date', 'stepsAdj')]
## 4. Make a histogram of the total number of steps taken each day and Calculate and report the mean
##    and median total number of steps taken per day. Do these values differ from the estimates from
##    the first part of the assignment? What is the impact of imputing missing data on the estimates
##    of the total daily number of steps?
stepsPerDay_Adj <- AMD_Adj %>%
group_by(date) %>%
summarize(total = sum(stepsAdj))
hist(stepsPerDay_Adj$total, main = expression('Total Steps per Day'[Adj]), xlab = 'Number of Steps')
## Means the same.  Minor difference in medians.
round(mean(stepsPerDay_Adj$total))
round(median(stepsPerDay_Adj$total))
## Are there differences in activity patterns between weekdays and weekends?
## For this part the 𝚠𝚎𝚎𝚔𝚍𝚊𝚢𝚜() function may be of some help here. Use the dataset w
## ith the filled-in missing values for this part.
## 1. Create a new factor variable in the dataset with two levels – “weekday” and “weekend”
##    indicating whether a given date is a weekday or weekend day.
AMD_Adj$weekdays <- as.factor(ifelse(weekdays(AMD_Adj$date) %in%
c("Saturday", "Sunday"), "weekend", "weekday"))
## 2. Make a panel plot containing a time series plot (i.e. type = 'l') of the 5-minute interval
##    (x-axis) and the avg number of steps taken, across all weekend days (y-axis). See the README
##    file in the GitHub repository to see an example of what this plot should look like using
##    simulated data.
AMD_Weekday <- aggregate(stepsAdj ~ interval + weekdays, AMD_Adj, mean)
xyplot(stepsAdj ~ interval | weekdays, AMD_Weekday, type = 'l', layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
library('lattice')
library('dplyr');
library('lattice')
## Code for reading in the dataset and/or processing the data
library('dplyr');
library('lattice')
URL <- 'https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip';
zipFile <- 'repdata_data_factivity.zip';
csvFile <- 'activity.csv'
download.file(URL, zipFile, method = 'curl')
unzip(zipFile)
AMD <- read.csv(csvFile, sep = ',', header = TRUE, stringsAsFactors = FALSE)
AMD$date <- as.Date(AMD$date)
## What is mean total number of steps taken per day?
### 1. Calculate the total number of steps taken per day
stepsPerDay <- AMD %>%
filter(!is.na(steps)) %>%
group_by(date) %>%
summarize(total = sum(steps))
### 2. Make a histogram of the total number of steps taken each day
hist(stepsPerDay$total, main = 'Total Steps per Day', xlab = 'Number of Steps')
### 3. Calculate and report the mean and median of the total number of steps taken per day
#### Mean
round(mean(stepsPerDay$total))
#### Median
median(stepsPerDay$total)
## What is the average daily activity pattern?
### 1. Make a time series plot (i.e. 𝚝𝚢𝚙𝚎 = "𝚕") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
stepsPerInterval <- aggregate(steps ~ interval, data = AMD, FUN = mean)
plot(x = stepsPerInterval$interval, y = stepsPerInterval$steps, type = 'l',
main = 'Avg Number of Steps Across All Days', xlab = 'Steps', ylab = 'Interval')
### 2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
stepsPerInterval[which.max(stepsPerInterval$steps), ]
## Imputing missing values
### 1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with 𝙽𝙰s)
sum(is.na(AMD$steps))
### 2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
#### For the outputs in the steps column that were NAs I chose to use the mean number of steps for the 5 minute interval
IntervalAvg <- aggregate(steps ~ interval, FUN = mean, data = AMD)
### 3. Create a new dataset that is equal to the original dataset but with the missing data filled in
AMD_Adj <- merge(x = AMD, y = IntervalAvg, by = 'interval')
AMD_Adj$stepsAdj <- ifelse(is.na(AMD_Adj$steps.x), AMD_Adj$steps.y, AMD_Adj$steps.x)
AMD_Adj <- AMD_Adj[c('interval', 'date', 'stepsAdj')]
### 4. Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
stepsPerDay_Adj <- AMD_Adj %>%
group_by(date) %>%
summarize(total = sum(stepsAdj))
hist(stepsPerDay_Adj$total, main = expression('Total Steps per Day'[Adj]), xlab = 'Number of Steps')
#### Means the same.  Minor difference in medians.
#### Mean
round(mean(stepsPerDay_Adj$total))
### Median
round(median(stepsPerDay_Adj$total))
## Are there differences in activity patterns between weekdays and weekends?
### 1. Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
AMD_Adj$weekdays <- as.factor(ifelse(weekdays(AMD_Adj$date) %in%
c('Saturday', 'Sunday'), 'weekend', 'weekday'))
### 2. Make a panel plot containing a time series plot (i.e. type = 'l') of the 5-minute interval (x-axis) and the avg number of steps taken, across all weekend days (y-axis). See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
AMD_Weekday <- aggregate(stepsAdj ~ interval + weekdays, AMD_Adj, mean)
xyplot(stepsAdj ~ interval | weekdays, AMD_Weekday, type = 'l', layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
setwd("~/Desktop/Week 1/Assignment 1")
setwd("~/Desktop/Week 1/Assignment 1/RepData_PeerAssessment1/Figures")
## 1. Code for reading in the dataset and/or processing the data
library('dplyr');
library('lattice')
URL <- 'https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip';
zipFile <- 'repdata_data_factivity.zip';
csvFile <- 'activity.csv'
download.file(URL, zipFile, method = 'curl')
unzip(zipFile)
AMD <- read.csv(csvFile, sep = ',', header = TRUE, stringsAsFactors = FALSE)
AMD$date <- as.Date(AMD$date)
## What is mean total number of steps taken per day?
## For this part of the assignment, you can ignore the missing values in the dataset.
## 1. Calculate the total number of steps taken per day
stepsPerDay <- AMD %>%
filter(!is.na(steps)) %>%
group_by(date) %>%
summarize(total = sum(steps))
## 2. Make a histogram of the total number of steps taken each day
png("Figure1.png", width = 480, height = 480)
hist(stepsPerDay$total, main = 'Total Steps per Day', xlab = 'Number of Steps')
dev.off()
## 3. Calculate and report the mean and median of the total number of steps taken per day
## Mean
round(mean(stepsPerDay$total))
##Median
median(stepsPerDay$total)
## What is the average daily activity pattern?
## 1. Make a time series plot (i.e. 𝚝𝚢𝚙𝚎 = "𝚕") of the 5-minute interval (x-axis) and
##    the average number of steps taken, averaged across all days (y-axis)
stepsPerInterval <- aggregate(steps ~ interval, data = AMD, FUN = mean)
png("Figure2.png", width = 480, height = 480)
plot(x = stepsPerInterval$interval, y = stepsPerInterval$steps, type = 'l',
main = 'Avg Number of Steps Across All Days', xlab = 'Steps', ylab = 'Interval')
dev.off()
## 2. Which 5-minute interval, on average across all the days in the dataset,
##    contains the maximum number of steps?
stepsPerInterval[which.max(stepsPerInterval$steps), ]
## Imputing missing values
## Note that there are a number of days/intervals where there are missing values (coded as 𝙽𝙰)
## The presence of missing days may introduce bias into some calculations or summaries of the data.
## 1. Calculate and report the total number of missing values in the dataset (i.e. the total number
##    of rows with 𝙽𝙰s)
sum(is.na(AMD$steps))
## 2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does
##    not need to be sophisticated. For example, you could use the mean/median for that day, or the mean
##    for that 5-minute interval, etc.
## For the outputs in the steps column that were NAs I chose to use the mean number of steps for the
## 5 minute interval
IntervalAvg <- aggregate(steps ~ interval, FUN = mean, data = AMD)
## 3. Create a new dataset that is equal to the original dataset but with the missing data filled in
AMD_Adj <- merge(x = AMD, y = IntervalAvg, by = 'interval')
AMD_Adj$stepsAdj <- ifelse(is.na(AMD_Adj$steps.x), AMD_Adj$steps.y, AMD_Adj$steps.x)
AMD_Adj <- AMD_Adj[c('interval', 'date', 'stepsAdj')]
## 4. Make a histogram of the total number of steps taken each day and Calculate and report the mean
##    and median total number of steps taken per day. Do these values differ from the estimates from
##    the first part of the assignment? What is the impact of imputing missing data on the estimates
##    of the total daily number of steps?
stepsPerDay_Adj <- AMD_Adj %>%
group_by(date) %>%
summarize(total = sum(stepsAdj))
png("Figure3.png", width = 480, height = 480)
hist(stepsPerDay_Adj$total, main = expression('Total Steps per Day'[Adj]), xlab = 'Number of Steps')
dev.off()
## Means the same.  Minor difference in medians.
round(mean(stepsPerDay_Adj$total))
round(median(stepsPerDay_Adj$total))
## Are there differences in activity patterns between weekdays and weekends?
## For this part the 𝚠𝚎𝚎𝚔𝚍𝚊𝚢𝚜() function may be of some help here. Use the dataset
## with the filled-in missing values for this part.
## 1. Create a new factor variable in the dataset with two levels – “weekday” and “weekend”
##    indicating whether a given date is a weekday or weekend day.
AMD_Adj$weekdays <- as.factor(ifelse(weekdays(AMD_Adj$date) %in%
c('Saturday', 'Sunday'), 'weekend', 'weekday'))
## 2. Make a panel plot containing a time series plot (i.e. type = 'l') of the 5-minute interval
##    (x-axis) and the avg number of steps taken, across all weekend days (y-axis). See the README
##    file in the GitHub repository to see an example of what this plot should look like using
##    simulated data.
AMD_Weekday <- aggregate(stepsAdj ~ interval + weekdays, AMD_Adj, mean)
png("Figure4.png", width = 480, height = 480)
xyplot(stepsAdj ~ interval | weekdays, AMD_Weekday, type = 'l', layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
dev.off()
library(knitr)
setwd("~/Desktop/Week 1/Assignment 1/RepData_PeerAssessment1/Data")
pwd
dir
dir()
knit2html("PA1_template.R")
